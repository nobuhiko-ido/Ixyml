require 'test/unit'
require 'shoulda'
require_relative '../lib/xyml/xyml'

class TestDocument < Test::Unit::TestCase

  fileDir="test/testfiles/"
    
  should ". Xyml_node has same values as correspoinding raw hash and array have." do
    nodeQT=Xyml.element_new(:questionText)
    #pp nodeQT
    nodeQT.st("textQT")
    nodeQT.sa(:type,"instruction")
    #print "#D#test_xyml_element.rb:nodeQT=";pp nodeQT
    assert_equal(nodeQT[:questionText][1],"textQT")
    assert_equal(nodeQT.gt,"textQT")
    nodeQ=Xyml.element_new(:question)
    nodeQ.ac(nodeQT)
    assert_equal(nodeQ.gcn(:questionText)[0].gt,"textQT")
    nodeQ.sa(:type,'handWriting')
    assert_equal(nodeQ.ga(:type),'handWriting')
    xyml=Xyml::Document.new(:quizlist)
    xyml.root.ac(nodeQ)
    assert_equal(xyml.root.gcn(:question)[0].ga(:type),'handWriting')
    nodeQ.sa(:type,'handWritingChanged')
    assert_equal('handWritingChanged',nodeQ.ga(:type))
    #print "#D#test_xyml_element.rb:Xyml_node:nodeQ=";pp nodeQ
    nodeQT2=Xyml.element_new(:questionText)
    nodeQT2.st("textQT2")
    nodeQT2.sa(:type,"choices");
    nodeQ.ac(nodeQT2)
    assert_equal("textQT2",nodeQ.gc[1].gt)
    assert_equal("textQT",nodeQ.gcf.gt)
    assert_equal("textQT",nodeQ.gcfn(:questionText).gt)
    assert_equal("textQT2",nodeQ.gca(:type,"choices")[0].gt)
    assert_equal("textQT2",nodeQ.gcna(:questionText,:type,"choices")[0].gt)
    assert_equal("textQT2",nodeQ.gcfna(:questionText,:type,"choices").gt)
    assert_equal(nodeQ,nodeQT2.gp)
    assert_equal(nodeQT,nodeQT2.gsp)
    assert_equal(nil,nodeQT.gsp)
    assert_equal(nil,nodeQ.gsp)
    assert_equal(nodeQT2,nodeQT.gsn)
    assert_equal(nil,nodeQT2.gsn)
    assert_equal(nil,nodeQ.gsn)
    nodeQT3=Xyml.extend_element({:questionText=>[
                              {:text_type=> "html"},
                              {:task_set => false},
                              {:title => nil},
                              {:instruction => nil},"textQT3"]})
    nodeQ.icb(nodeQT,nodeQT3)
    assert_equal(nodeQT3,nodeQT.gsp)
    nodeQT4=Xyml.extend_element({:questionText=>[
                              {:text_type=> "text"},
                              {:task_set => false},
                              {:title => nil},
                              {:instruction => nil},"textQT4"]})
    nodeQ.ica(nodeQT2,nodeQT4)
    assert_equal(nodeQT4,nodeQT2.gsn)
    #pp "#D#test_xyml_element.rb:xyml=";pp xyml
    assert_equal(xyml.root,nodeQT4.gr)
    nodeQT4.da(:task_set)
    assert_equal(nil,nodeQT4.ga(:task_set))
    nodeQT4.dsl
    assert_equal(nil,nodeQT4.gr)
  end

  should ". Created xyml_node can be saved as a xyml file." do
    doc=Xyml::Document.new :quiz
    doc.root.sa(:type,'handWriting')
    elementQuestions=Xyml.element_new(:questions)
    elementQuestion=Xyml.element_new(:question)
    elementQuestion.st('who are your?');
    doc.root.ac(elementQuestions)
    elementQuestions.ac(elementQuestion)
    doc.out_XYML(File.open(fileDir+'xymlTemp.xyml','w'))
    docNew=Xyml::Document.new File.open(fileDir+'xymlTemp.xyml','r')
    #docNew=Xyml::Document.new
    #docNew.load_XYML File.open(fileDir+'xymlTemp.xyml','r')
    #print "#D#test_xyml_element.rb:can be saved as xyml:(xyml 1)doc=";pp doc
    #print "#D#test_xyml_element.rb:can be saved as xyml:(xyml 2)docNew=";pp docNew
    assert_equal(doc.inspect,docNew.inspect)
    #print doc.root.gcfn(:questions).to_s
    #print "#D#test_xyml_element.rb:can be saved as xyml:docNew=#{docNew.root.gcfn(:questions).to_s}"
    assert_equal(doc.root.gcfn(:questions).to_s,docNew.root.gcfn(:questions).to_s)
  end

  should ". Created xyml_node can be saved as a xml file." do
    doc=Xyml::Document.new :quiz
    doc.root.sa(:type,'handWriting')
    elementQuestions=Xyml.element_new(:questions)
    elementQuestion=Xyml.element_new(:question)
    elementQuestion.st('who are your?');
    doc.root.ac(elementQuestions)
    elementQuestions.ac(elementQuestion)
    doc.out_XML(File.open(fileDir+'xmlTemp.xml','w'))
    docNew=Xyml::Document.new
    docNew.load_XML(File.open(fileDir+'xmlTemp.xml','r'))
    #print "#D#test_xyml_element.rb:can be saved as xml:(1)doc=";pp doc
    #print "#D#test_xyml_element.rb:can be saved as xml:(2)docNew=";pp docNew
    assert_equal(doc.inspect,docNew.inspect)
    #print doc.root.gcfn(:questions).to_s
    #print "#D#test_xyml_element.rb:can be saved as xml:(3)docNew.root.gcfn(:questions)=#{docNew.root.gcfn(:questions).to_s}\n"
    #print "#D#test_xyml_element.rb:can be saved as xml:(4)doc.root.gcfn(:questions)=#{doc.root.gcfn(:questions).to_s}\n"
    assert_equal(doc.root.gcfn(:questions).to_s,docNew.root.gcfn(:questions).to_s)
    #print "#D#test_xyml_element.rb:can be saved as xml:(5)docNew.root.gcfn(:questions).gcfn(:question)=#{docNew.root.gcfn(:questions).gcfn(:question).to_s}\n"
    #print "#D#test_xyml_element.rb:can be saved as xml:(6)doc.root.gcfn(:questions).gcfn(:question)=#{doc.root.gcfn(:questions).gcfn(:question).to_s}\n"
    assert_equal(doc.root.gcfn(:questions).gcfn(:question).to_s,docNew.root.gcfn(:questions).gcfn(:question).to_s)
  end

  
end
